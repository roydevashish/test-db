-- DBSEC
CREATE TABLE DBSEC_CUSTOMERS_APP_CONTEXT (
    SALES_REP_ID NUMBER,
    USER_NAME VARCHAR2(30)
)
/

GRANT SELECT ON DBSEC_CUSTOMERS_APP_CONTEXT TO VPD_CLERK1, VPD_CLERK2, VPD_CLERK3
/

INSERT INTO DBSEC_CUSTOMERS_APP_CONTEXT (SALES_REP_ID, USER_NAME)
VALUES (2336, 'VPD_CLERK1');

INSERT INTO DBSEC_CUSTOMERS_APP_CONTEXT (SALES_REP_ID, USER_NAME)
VALUES (9644, 'VPD_CLERK2');

INSERT INTO DBSEC_CUSTOMERS_APP_CONTEXT (SALES_REP_ID, USER_NAME)
VALUES (4587, 'VPD_CLERK3');

COMMIT;

SELECT * FROM DBSEC_CUSTOMERS_APP_CONTEXT;

CREATE OR REPLACE CONTEXT DBSEC_CUSTOMERS_SALESREP
    USING PKG_DBSEC_CUST_SALES_REP
/

CREATE OR REPLACE PACKAGE PKG_DBSEC_CUST_SALES_REP AS
    PROCEDURE SET_CONTEXT;
END;
/

CREATE OR REPLACE PACKAGE BODY PKG_DBSEC_CUST_SALES_REP IS
    PROCEDURE SET_CONTEXT IS
        V_SALES_REP_ID NUMBER;
    BEGIN
        -- Ensure we fetch the correct SALES_REP_ID
        SELECT SALES_REP_ID
        INTO V_SALES_REP_ID
        FROM DBSEC.DBSEC_CUSTOMERS_APP_CONTEXT
        WHERE UPPER(USER_NAME) = UPPER(SYS_CONTEXT('USERENV', 'SESSION_USER'));

        -- Set the application context
        DBMS_SESSION.SET_CONTEXT('DBSEC_CUSTOMERS_SALESREP', 'SALES_REPID', V_SALES_REP_ID);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            -- If no match, set NULL (which will trigger '1=1' in the policy function)
            DBMS_SESSION.SET_CONTEXT('DBSEC_CUSTOMERS_SALESREP', 'SALES_REPID', NULL);
    END;
END;
/

CREATE OR REPLACE FUNCTION DBSEC_CUST_SALESREP_WHERE(
    P_SCHEMA_NAME IN VARCHAR2, 
    P_OBJECT_NAME IN VARCHAR2
) RETURN VARCHAR2 IS 
    V_SALES_REP_ID VARCHAR2(30);
BEGIN
    -- Retrieve the value from the context
    V_SALES_REP_ID := SYS_CONTEXT('DBSEC_CUSTOMERS_SALESREP', 'SALES_REPID');

    -- If the value is NULL, return '1=1' (no restriction to avoid errors)
    IF V_SALES_REP_ID IS NULL THEN
        RETURN '1=1';
    ELSE
        RETURN 'SALES_REP_ID = ' || V_SALES_REP_ID;
    END IF;
END;
/

BEGIN
    DBMS_RLS.ADD_POLICY(
        OBJECT_SCHEMA => 'DBSEC',
        OBJECT_NAME => 'CUSTOMERS',
        POLICY_NAME => 'DBSEC_CUST_SALESREP_POLICY',
        FUNCTION_SCHEMA => 'DBSEC',
        POLICY_FUNCTION => 'DBSEC_CUST_SALESREP_WHERE',
        STATEMENT_TYPES => 'SELECT, UPDATE, DELETE',
        ENABLE => TRUE
    );
END;
/

CREATE OR REPLACE TRIGGER TGR_AFTER_LOGON
    AFTER LOGON ON DATABASE
BEGIN
    -- Ensure DBSEC package executes
    DBSEC.PKG_DBSEC_CUST_SALES_REP.SET_CONTEXT;
EXCEPTION
    WHEN OTHERS THEN
        NULL; -- Prevent logon failures due to trigger errors
END;
/

-- VPD_CLERK
SELECT * FROM DBSEC.CUSTOMERS;

-- DBSEC
-- DEACTIVATE POLICY AND REMOVING TRIGGER
BEGIN
    DBMS_RLS.ENABLE_POLICY(
        OBJECT_SCHEMA => 'DBSEC',
        OBJECT_NAME => 'CUSTOMERS',
        POLICY_NAME => 'DBSEC_CUST_SALESREP_POLICY',
        ENABLE => FALSE
    );
END;

DROP TRIGGER TGR_AFTER_LOGON;