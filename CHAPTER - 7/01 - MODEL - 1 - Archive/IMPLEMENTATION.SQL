-- RUN AS DB_AUDIT
-- Define the Entities
CREATE TABLE DB_AUDIT.APP_ENTITY (
    ENTITY_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ENTITY_NAME VARCHAR2(255) NOT NULL,
    ENTITY_TYPE VARCHAR2(50) NOT NULL,
    CTL_REC_STAT CHAR(1) DEFAULT 'A' CHECK (CTL_REC_STAT IN ('A', 'I')) -- Active/Inactive
);

-- Create the Audit Model Repository
CREATE TABLE DB_AUDIT.APP_AUDIT_ACTION (
    AUDIT_ACTION_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ENTITY_ID NUMBER NOT NULL,
    ACTION_TYPE VARCHAR2(50) NOT NULL,
    AUDIT_START_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    AUDIT_EXPIRE_DATE TIMESTAMP,
    CTL_REC_STAT CHAR(1) DEFAULT 'A' CHECK (CTL_REC_STAT IN ('A', 'I')) -- Active/Inactive
);

ALTER TABLE DB_AUDIT.APP_AUDIT_ACTION ADD CONSTRAINT FK_AUDIT_ENTITY FOREIGN KEY (ENTITY_ID) REFERENCES DB_AUDIT.APP_ENTITY(ENTITY_ID);

-- Create the Audit Data Table
DROP TABLE DB_AUDIT.APP_AUDIT_DATA;
CREATE TABLE DB_AUDIT.APP_AUDIT_DATA (
    AUDIT_DATA_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    AUDIT_ACTION_ID NUMBER NOT NULL,
    ACTION_TIMESTAMP TIMESTAMP DEFAULT SYSTIMESTAMP,
    ACTION_USER VARCHAR2(255) DEFAULT USER,
    ACTION_DESCRIPTION VARCHAR2(1000),
    
    CONSTRAINT FK_AUDIT_ACTION FOREIGN KEY (AUDIT_ACTION_ID) REFERENCES DB_AUDIT.APP_AUDIT_ACTION(AUDIT_ACTION_ID)
);

-- Create the App User Table (Sample Table)
CREATE TABLE DB_AUDIT.APP_USERS (
    USER_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USERNAME VARCHAR2(255) NOT NULL
);

-- Grant permissions to User Scott
GRANT SELECT, INSERT, UPDATE, DELETE ON DB_AUDIT.APP_USERS TO SCOTT;

-- Check and Add entity to the App Entity Table
SELECT * FROM DB_AUDIT.APP_ENTITY WHERE ENTITY_NAME = 'APP_USERS';

INSERT INTO DB_AUDIT.APP_ENTITY (ENTITY_NAME, ENTITY_TYPE) VALUES ('APP_USERS', 'TABLE');
COMMIT;

-- Create a Trigger for Auditing (Example: Auditing Updates on a Sample Table "APP_USERS")
CREATE OR REPLACE TRIGGER DB_AUDIT.TRG_APP_USERS_AUDIT
AFTER UPDATE OR DELETE OR INSERT ON DB_AUDIT.APP_USERS
FOR EACH ROW
DECLARE
    v_entity_id NUMBER;
    v_audit_action_id NUMBER;
    v_action_type VARCHAR2(50);
BEGIN
    -- Get Entity ID
    SELECT ENTITY_ID INTO v_entity_id FROM DB_AUDIT.APP_ENTITY WHERE ENTITY_NAME = 'APP_USERS';
    
    -- Determine the action type
    IF INSERTING THEN
        v_action_type := 'INSERT';
    ELSIF UPDATING THEN
        v_action_type := 'UPDATE';
    ELSIF DELETING THEN
        v_action_type := 'DELETE';
    END IF;
    
    -- Insert into APP_AUDIT_ACTION if not exists
    INSERT INTO DB_AUDIT.APP_AUDIT_ACTION (ENTITY_ID, ACTION_TYPE)
    VALUES (v_entity_id, v_action_type)
    RETURNING AUDIT_ACTION_ID INTO v_audit_action_id;
    
    -- Insert into APP_AUDIT_DATA
    INSERT INTO DB_AUDIT.APP_AUDIT_DATA (AUDIT_ACTION_ID, ACTION_USER, ACTION_DESCRIPTION)
    VALUES (v_audit_action_id, USER, 'Action: ' || v_action_type || ' performed on APP_USERS');
END;
/

-- RUN AS DIFFERENT USERS
-- Different operations into DB_AUDIT.APP_USERS with different users to test it.

-- Insert
INSERT INTO DB_AUDIT.APP_USERS (USERNAME) VALUES ('TestUser1');
COMMIT;

SELECT * FROM DB_AUDIT.APP_AUDIT_DATA ORDER BY ACTION_TIMESTAMP DESC;

-- Update
UPDATE DB_AUDIT.APP_USERS SET USERNAME = 'UpdatedUser' WHERE USERNAME = 'TestUser1';
COMMIT;

SELECT * FROM DB_AUDIT.APP_AUDIT_DATA ORDER BY ACTION_TIMESTAMP DESC;

-- Delete
DELETE FROM DB_AUDIT.APP_USERS WHERE USERNAME = 'UpdatedUser';
COMMIT;

SELECT * FROM DB_AUDIT.APP_AUDIT_DATA ORDER BY ACTION_TIMESTAMP DESC;

-- Check the action log
SELECT * FROM DB_AUDIT.APP_AUDIT_ACTION ORDER BY AUDIT_START_DATE DESC;

-- Invalid entry
UPDATE DB_AUDIT.APP_USERS SET USERNAME = 'NonExistent' WHERE USERNAME = 'FakeUser';
COMMIT;

SELECT * FROM DB_AUDIT.APP_AUDIT_DATA ORDER BY ACTION_TIMESTAMP DESC;