-- RUN AS SYS
-- Create and Configure the Audit User
CREATE USER DBAUD IDENTIFIED BY tiger;
GRANT CREATE SESSION TO DBAUD;
GRANT CREATE TABLE, CREATE TRIGGER, CREATE SEQUENCE TO DBAUD;
GRANT UNLIMITED TABLESPACE TO DBAUD;

-- Step 1: Create Tables

-- APP_ENTITY: Stores entities being audited
CREATE TABLE APP_ENTITY (
    ENTITY_ID INT PRIMARY KEY AUTO_INCREMENT,
    ENTITY_NAME VARCHAR(255) NOT NULL,
    ENTITY_TYPE ENUM('USER', 'TABLE', 'COLUMN') NOT NULL,
    CTL_REC_STAT ENUM('ACTIVE', 'INACTIVE') NOT NULL DEFAULT 'ACTIVE'
);

-- APP_ACTION_TYPE: Stores action types
CREATE TABLE APP_ACTION_TYPE (
    ACTION_TYPE_ID INT PRIMARY KEY AUTO_INCREMENT,
    ACTION_TYPE_DESC VARCHAR(50) NOT NULL UNIQUE,
    CTL_REC_STAT ENUM('ACTIVE', 'INACTIVE') NOT NULL DEFAULT 'ACTIVE'
);

-- APP_AUDIT_ACTION: Links entities and action types
CREATE TABLE APP_AUDIT_ACTION (
    AUDIT_ACTION_ID INT PRIMARY KEY AUTO_INCREMENT,
    ENTITY_ID INT,
    ACTION_TYPE_ID INT,
    AUDIT_START_DATE DATETIME NOT NULL,
    AUDIT_EXPIRE_DATE DATETIME,
    CTL_INS_DTTM DATETIME DEFAULT CURRENT_TIMESTAMP,
    CTL_UPD_DTTM DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CTL_UPD_USER VARCHAR(100) NOT NULL,
    CTL_REC_STAT ENUM('ACTIVE', 'INACTIVE') NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY (ENTITY_ID) REFERENCES APP_ENTITY(ENTITY_ID),
    FOREIGN KEY (ACTION_TYPE_ID) REFERENCES APP_ACTION_TYPE(ACTION_TYPE_ID)
);

-- APP_AUDIT_DATA: Stores audit trail
CREATE TABLE APP_AUDIT_DATA (
    AUDIT_DATA_ID INT PRIMARY KEY AUTO_INCREMENT,
    AUDIT_ACTION_ID INT,
    AUDIT_DATA TEXT NOT NULL,
    AUD_INS_DTTM DATETIME DEFAULT CURRENT_TIMESTAMP,
    AUD_UPD_DTTM DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    AUD_UPD_USER VARCHAR(100) NOT NULL,
    AUD_REC_STAT ENUM('ACTIVE', 'INACTIVE') NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY (AUDIT_ACTION_ID) REFERENCES APP_AUDIT_ACTION(AUDIT_ACTION_ID)
);

-- Step 2: Insert Action Types
INSERT INTO APP_ACTION_TYPE (ACTION_TYPE_DESC, CTL_REC_STAT) VALUES
('INSERT', 'ACTIVE'),
('UPDATE', 'ACTIVE'),
('DELETE', 'ACTIVE'),
('LOGIN', 'ACTIVE'),
('LOGOUT', 'ACTIVE');

-- Step 3: Trigger for Auditing Changes
DELIMITER $$
CREATE TRIGGER trg_audit_changes
AFTER INSERT OR UPDATE OR DELETE ON target_table
FOR EACH ROW
BEGIN
    DECLARE current_action_type_id INT;
    
    -- Determine action type
    IF (NEW.id IS NOT NULL AND OLD.id IS NULL) THEN
        SET current_action_type_id = (SELECT ACTION_TYPE_ID FROM APP_ACTION_TYPE WHERE ACTION_TYPE_DESC = 'INSERT');
    ELSIF (NEW.id IS NOT NULL AND OLD.id IS NOT NULL) THEN
        SET current_action_type_id = (SELECT ACTION_TYPE_ID FROM APP_ACTION_TYPE WHERE ACTION_TYPE_DESC = 'UPDATE');
    ELSIF (NEW.id IS NULL AND OLD.id IS NOT NULL) THEN
        SET current_action_type_id = (SELECT ACTION_TYPE_ID FROM APP_ACTION_TYPE WHERE ACTION_TYPE_DESC = 'DELETE');
    END IF;
    
    -- Insert audit data
    INSERT INTO APP_AUDIT_DATA (AUDIT_ACTION_ID, AUDIT_DATA, AUD_INS_DTTM, AUD_UPD_USER, AUD_REC_STAT)
    VALUES (
        (SELECT AUDIT_ACTION_ID FROM APP_AUDIT_ACTION WHERE ENTITY_ID = (SELECT ENTITY_ID FROM APP_ENTITY WHERE ENTITY_NAME = 'target_table') AND ACTION_TYPE_ID = current_action_type_id),
        CONCAT('Old: ', OLD.value_column, ' New: ', NEW.value_column),
        NOW(),
        CURRENT_USER(),
        'ACTIVE'
    );
END $$
DELIMITER ;
