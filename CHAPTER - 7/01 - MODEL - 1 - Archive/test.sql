-- Step 1: Create user and grant privileges

DROP USER DB_AUDIT CASCADE;
CREATE USER DB_AUDIT IDENTIFIED BY tiger;
GRANT CONNECT, RESOURCE, CREATE TRIGGER, CREATE PROCEDURE TO DB_AUDIT;  

-- Step 2: Create audit tables

CREATE TABLE APP_AUDIT_ACTION_TYPE(
    ACTION_TYPE_ID NUMBER PRIMARY KEY,
    ACTION_TYPE_DESC VARCHAR2(30),
    CTL_REC_STAT VARCHAR2(1)
);


CREATE TABLE APP_AUDIT_ENTITY (
    ENTITY_ID NUMBER PRIMARY KEY,
    ENTITY_NAME VARCHAR2(30),
    ENTITY_TYPE VARCHAR2(15),
    CTL_REC_STAT VARCHAR2(1)
);

CREATE TABLE APP_AUDIT_ACTION(
    AUDIT_ACTION_ID NUMBER PRIMARY KEY,
    AUDIT_START_DATE DATE,
    AUDIT_EXPIRE_DATE DATE,
    CTL_INS_DTTM DATE,
    CTL_UPD_DTTM DATE,
    CTL_UPD_USER VARCHAR2(30),
    CTL_REC_STAT VARCHAR2(1),
    ACTION_TYPE_ID NUMBER,
    ENTITY_ID NUMBER,
    FOREIGN KEY(ENTITY_ID) REFERENCES APP_AUDIT_ENTITY,
    FOREIGN KEY(ACTION_TYPE_ID) REFERENCES APP_AUDIT_ACTION_TYPE
);


CREATE TABLE APP_AUDIT_DATA(
    AUDIT_DATA_ID NUMBER PRIMARY KEY,
    -- ADD A AUTO INCREMEMT IN THE AUDIT_DATA_ID COLUMN
    AUDIT_DATA VARCHAR2(4000),
    AUDIT_ACTION_ID NUMBER,
    AUD_INS_DTTM DATE,
    AUD_UPD_USER VARCHAR2(30),
    AUD_REC_STAT VARCHAR2(1),
    FOREIGN KEY(AUDIT_ACTION_ID) REFERENCES APP_AUDIT_ACTION
);

-- Step 4: Create application tables

CREATE TABLE APP_TBL1(
    CODE NUMBER PRIMARY KEY,
    DESCRIPTION VARCHAR2(20)
);

CREATE TABLE APP_TBL2(
    ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(35),
    PHONE VARCHAR2(14)
);

-- Step 5: Insert sample data

INSERT INTO APP_TBL1 VALUES(1, 'Description #1');
INSERT INTO APP_TBL1 VALUES(2, 'Description #2');

INSERT INTO APP_TBL2 VALUES(100, 'Tom Jones', '123-123-1234');
INSERT INTO APP_TBL2 VALUES(101, 'Linda Evans', '234-234-2345');
INSERT INTO APP_TBL2 VALUES(102, 'Joan Collins', '345-345-3456');
COMMIT;

-- Step 6: Set up audit types and entities-- Action types

INSERT INTO APP_AUDIT_ACTION_TYPE VALUES(1, 'UPDATE', 'A');
INSERT INTO APP_AUDIT_ACTION_TYPE VALUES(2, 'DELETE', 'A');
INSERT INTO APP_AUDIT_ACTION_TYPE VALUES(3, 'INSERT', 'A');

-- Entities (tables and current user)
INSERT INTO APP_AUDIT_ENTITY VALUES(1, 'APP_TBL1', 'TABLE', 'A');
INSERT INTO APP_AUDIT_ENTITY VALUES(2, 'APP_TBL2', 'TABLE', 'A');
INSERT INTO APP_AUDIT_ENTITY VALUES(3, 'SCOTT', 'USER', 'A');


-- Audit actions for each operation on each table
SELECT * FROM APP_AUDIT_ENTITY;
-- For APP_TBL1
INSERT INTO APP_AUDIT_ACTION 
VALUES(1, SYSDATE, SYSDATE + 30, SYSDATE, SYSDATE, USER, 'A', 1, 1);

INSERT INTO APP_AUDIT_ACTION 
VALUES(2, SYSDATE, SYSDATE + 30, SYSDATE, SYSDATE, USER, 'A', 2, 1);

INSERT INTO APP_AUDIT_ACTION 
VALUES(3, SYSDATE, SYSDATE + 30, SYSDATE, SYSDATE, USER, 'A', 3, 1);

-- For APP_TBL2
INSERT INTO APP_AUDIT_ACTION 
VALUES(4, SYSDATE, SYSDATE + 30, SYSDATE, SYSDATE, USER, 'A', 1, 2);

INSERT INTO APP_AUDIT_ACTION 
VALUES(5, SYSDATE, SYSDATE + 30, SYSDATE, SYSDATE, USER, 'A', 2, 2);

INSERT INTO APP_AUDIT_ACTION 
VALUES(6, SYSDATE, SYSDATE + 30, SYSDATE, SYSDATE, USER, 'A', 3, 2);

-- For current user (general operations)
INSERT INTO APP_AUDIT_ACTION 
VALUES(7, SYSDATE, SYSDATE + 30, SYSDATE, SYSDATE, USER, 'A', 1, 3);

INSERT INTO APP_AUDIT_ACTION 
VALUES(8, SYSDATE, SYSDATE + 30, SYSDATE, SYSDATE, USER, 'A', 2, 3);

INSERT INTO APP_AUDIT_ACTION 
VALUES(9, SYSDATE, SYSDATE + 30, SYSDATE, SYSDATE, USER, 'A', 3, 3);
COMMIT;





-- Step 7: Create the audit package

CREATE OR REPLACE PACKAGE PKG_APP_AUDIT IS
    PROCEDURE LOG_OPERATION(
        P_TABLE_NAME VARCHAR2,
        P_OPERATION VARCHAR2,
        P_OLD_DATA VARCHAR2 DEFAULT NULL,
        P_NEW_DATA VARCHAR2 DEFAULT NULL
    );
END;
/
--create the package body
CREATE OR REPLACE PACKAGE BODY PKG_APP_AUDIT IS
    PROCEDURE LOG_OPERATION(
        P_TABLE_NAME VARCHAR2,
        P_OPERATION VARCHAR2,
        P_OLD_DATA VARCHAR2 DEFAULT NULL,
        P_NEW_DATA VARCHAR2 DEFAULT NULL
    ) IS
        V_AUDIT_ACTION_ID NUMBER;
        V_AUDIT_DATA VARCHAR2(4000);
    BEGIN
        -- First try to find a specific audit action for this table and operation
        BEGIN
            SELECT A.AUDIT_ACTION_ID INTO V_AUDIT_ACTION_ID
            FROM APP_AUDIT_ACTION A, APP_AUDIT_ENTITY E, APP_AUDIT_ACTION_TYPE T
            WHERE A.ENTITY_ID = E.ENTITY_ID
            AND A.ACTION_TYPE_ID = T.ACTION_TYPE_ID
            AND E.ENTITY_NAME = P_TABLE_NAME
            AND E.ENTITY_TYPE = 'TABLE'
            AND T.ACTION_TYPE_DESC = UPPER(P_OPERATION)
            AND SYSDATE BETWEEN A.AUDIT_START_DATE AND A.AUDIT_EXPIRE_DATE
            AND ROWNUM = 1;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                -- If not found, try to find a general audit action for the user
                BEGIN
                    SELECT A.AUDIT_ACTION_ID INTO V_AUDIT_ACTION_ID
                    FROM APP_AUDIT_ACTION A, APP_AUDIT_ENTITY E, APP_AUDIT_ACTION_TYPE T
                    WHERE A.ENTITY_ID = E.ENTITY_ID
                    AND A.ACTION_TYPE_ID = T.ACTION_TYPE_ID
                    AND E.ENTITY_NAME = USER
                    AND E.ENTITY_TYPE = 'USER'
                    AND T.ACTION_TYPE_DESC = UPPER(P_OPERATION)
                    AND SYSDATE BETWEEN A.AUDIT_START_DATE AND A.AUDIT_EXPIRE_DATE
                    AND ROWNUM = 1;
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        RETURN; -- No audit configuration found
                END;
        END;
        
        -- Prepare audit data
        V_AUDIT_DATA := P_OPERATION || ' on ' || P_TABLE_NAME;
        IF P_OLD_DATA IS NOT NULL THEN
            V_AUDIT_DATA := V_AUDIT_DATA || ' | Old: ' || P_OLD_DATA;
        END IF;
        IF P_NEW_DATA IS NOT NULL THEN
            V_AUDIT_DATA := V_AUDIT_DATA || ' | New: ' || P_NEW_DATA;
        END IF;
        
        -- Insert audit record
        INSERT INTO APP_AUDIT_DATA(
            AUDIT_DATA_ID, AUDIT_DATA, AUDIT_ACTION_ID,
            AUD_INS_DTTM, AUD_UPD_USER, AUD_REC_STAT
        ) VALUES (
            SEQ_APP_AUDIT_DATA.NEXTVAL, V_AUDIT_DATA, V_AUDIT_ACTION_ID,
            SYSDATE, USER, 'A'
        );
END;
END;
/

-- Step 8: Create triggers for the application tables
-- Trigger for APP_TBL1
CREATE OR REPLACE TRIGGER TRG_APP_TBL1_AUDIT
BEFORE INSERT OR UPDATE OR DELETE 
ON APP_TBL1 
FOR EACH ROW 
DECLARE
    V_OPERATION VARCHAR2(10);
    V_OLD_DATA VARCHAR2(4000);
    V_NEW_DATA VARCHAR2(4000);BEGIN
    IF INSERTING THEN
        V_OPERATION := 'INSERT';
        V_NEW_DATA := 'CODE=' || :NEW.CODE || ',DESC=' || :NEW.DESCRIPTION;
        PKG_APP_AUDIT.LOG_OPERATION('APP_TBL1', V_OPERATION, NULL, V_NEW_DATA);
    ELSIF UPDATING THEN
        V_OPERATION := 'UPDATE';
        V_OLD_DATA := 'CODE=' || :OLD.CODE || ',DESC=' || :OLD.DESCRIPTION;
        V_NEW_DATA := 'CODE=' || :NEW.CODE || ',DESC=' || :NEW.DESCRIPTION;
        PKG_APP_AUDIT.LOG_OPERATION('APP_TBL1', V_OPERATION, V_OLD_DATA, V_NEW_DATA);
    ELSIF DELETING THEN
        V_OPERATION := 'DELETE';
        V_OLD_DATA := 'CODE=' || :OLD.CODE || ',DESC=' || :OLD.DESCRIPTION;
        PKG_APP_AUDIT.LOG_OPERATION('APP_TBL1', V_OPERATION, V_OLD_DATA, NULL);
END IF;
END;
/

-- Trigger for APP_TBL2
CREATE OR REPLACE TRIGGER TRG_APP_TBL2_AUDIT
BEFORE INSERT OR UPDATE OR DELETE ON APP_TBL2 FOR EACH ROW DECLARE
    V_OPERATION VARCHAR2(10);
    V_OLD_DATA VARCHAR2(4000);
    V_NEW_DATA VARCHAR2(4000);BEGIN
    IF INSERTING THEN
        V_OPERATION := 'INSERT';
        V_NEW_DATA := 'ID=' || :NEW.ID || ',NAME=' || :NEW.NAME || ',PHONE=' || :NEW.PHONE;
        PKG_APP_AUDIT.LOG_OPERATION('APP_TBL2', V_OPERATION, NULL, V_NEW_DATA);
    ELSIF UPDATING THEN
        V_OPERATION := 'UPDATE';
        V_OLD_DATA := 'ID=' || :OLD.ID || ',NAME=' || :OLD.NAME || ',PHONE=' || :OLD.PHONE;
        V_NEW_DATA := 'ID=' || :NEW.ID || ',NAME=' || :NEW.NAME || ',PHONE=' || :NEW.PHONE;
        PKG_APP_AUDIT.LOG_OPERATION('APP_TBL2', V_OPERATION, V_OLD_DATA, V_NEW_DATA);
    ELSIF DELETING THEN
        V_OPERATION := 'DELETE';
        V_OLD_DATA := 'ID=' || :OLD.ID || ',NAME=' || :OLD.NAME || ',PHONE=' || :OLD.PHONE;
        PKG_APP_AUDIT.LOG_OPERATION('APP_TBL2', V_OPERATION, V_OLD_DATA, NULL);
END IF;
END;
/

-- Step 9: Test the audit system
-- Test INSERT

INSERT INTO APP_TBL1 VALUES(3, 'Description #3');
INSERT INTO APP_TBL2 VALUES(103, 'New Person', '555-555-5555');


--letâ€™s check the result 
SET LINESIZE 200
SET PAGESIZE 100
COLUMN OPERATION FORMAT A50
COLUMN ON_ENTITY FORMAT A15
COLUMN ACTION_TYPE FORMAT A10


SELECT
    D.AUDIT_DATA_ID,
    D.AUDIT_DATA AS OPERATION,
    TO_CHAR(D.AUD_INS_DTTM, 'DD-MON-YYYY HH24:MI:SS') AS TIMESTAMP,
    D.AUD_UPD_USER AS PERFORMED_BY,
    E.ENTITY_NAME AS ON_ENTITY,
T.ACTION_TYPE_DESC AS ACTION_TYPE
FROM
    APP_AUDIT_DATA D,
    APP_AUDIT_ACTION A,
    APP_AUDIT_ENTITY E,
APP_AUDIT_ACTION_TYPE T
WHERE
    D.AUDIT_ACTION_ID = A.AUDIT_ACTION_ID
    AND A.ENTITY_ID = E.ENTITY_ID
AND A.ACTION_TYPE_ID = T.ACTION_TYPE_ID
ORDER BY
    D.AUDIT_DATA_ID;


-- Test UPDATE  
UPDATE APP_TBL2 SET PHONE = '999-999-9999' WHERE ID = 100;

-- Test DELETE
DELETE FROM APP_TBL1 WHERE CODE = 2;
DELETE FROM APP_TBL2 WHERE ID = 101;
COMMIT;

SELECT
    D.AUDIT_DATA_ID,
    D.AUDIT_DATA AS OPERATION,
    TO_CHAR(D.AUD_INS_DTTM, 'DD-MON-YYYY HH24:MI:SS') AS TIMESTAMP,
    D.AUD_UPD_USER AS PERFORMED_BY,
    E.ENTITY_NAME AS ON_ENTITY,
T.ACTION_TYPE_DESC AS ACTION_TYPE
FROM
    APP_AUDIT_DATA D,
    APP_AUDIT_ACTION A,
    APP_AUDIT_ENTITY E,
APP_AUDIT_ACTION_TYPE T
WHERE
    D.AUDIT_ACTION_ID = A.AUDIT_ACTION_ID
    AND A.ENTITY_ID = E.ENTITY_ID
AND A.ACTION_TYPE_ID = T.ACTION_TYPE_ID
ORDER BY
    D.AUDIT_DATA_ID;

DESC APP_AUDIT_DATA;

SELECT * FROM APP_AUDIT_DATA;

SELECT * FROM APP_AUDIT_ACTION;
