-- CREATE DB_AUDIT USER AND CONFIG IT.
DROP USER DB_AUDIT CASCADE;

CREATE USER DB_AUDIT IDENTIFIED BY tiger;
GRANT CREATE SESSION TO DB_AUDIT;
GRANT CREATE TABLE, CREATE TRIGGER, CREATE SEQUENCE, CREATE PROCEDURE TO DB_AUDIT;
GRANT UNLIMITED TABLESPACE TO DB_AUDIT;
GRANT EXECUTE ON DBMS_SCHEDULER TO DB_AUDIT;

-- CREATE ALL THE AUDIT TABLES
CREATE TABLE DB_AUDIT.APP_ENTITY (
    ENTITY_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ENTITY_NAME VARCHAR2(255) NOT NULL,
    ENTITY_TYPE VARCHAR2(50) NOT NULL,
    CTL_REC_STAT CHAR(1) DEFAULT 'A' CHECK (CTL_REC_STAT IN ('A', 'I'))
);

CREATE TABLE DB_AUDIT.APP_ACTION_TYPE (
    ACTION_TYPE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ACTION_TYPE_DESC VARCHAR2(255),
    CTL_REC_STAT CHAR(1) DEFAULT 'A' CHECK (CTL_REC_STAT IN ('A', 'I'))
);

CREATE TABLE DB_AUDIT.APP_AUDIT_ACTION (
    AUDIT_ACTION_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ENTITY_ID NUMBER NOT NULL REFERENCES DB_AUDIT.APP_ENTITY(ENTITY_ID),
    ACTION_TYPE_ID NUMBER NOT NULL REFERENCES DB_AUDIT.APP_ACTION_TYPE(ACTION_TYPE_ID),
    AUDIT_START_DATE DATE,
    AUDIT_EXPIRE_DATE DATE,
    CTL_INS_DTTM TIMESTAMP DEFAULT SYSTIMESTAMP,
    CTL_UPD_DTTM TIMESTAMP DEFAULT SYSTIMESTAMP,
    CTL_UPD_USER VARCHAR2(30) DEFAULT USER,
    CTL_REC_STAT CHAR(1) DEFAULT 'A' CHECK(CTL_REC_STAT IN ('A', 'I'))
);

CREATE TABLE DB_AUDIT.APP_AUDIT_DATA (
    AUDIT_DATA_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    AUDIT_ACTION_ID NUMBER NOT NULL REFERENCES DB_AUDIT.APP_AUDIT_ACTION(AUDIT_ACTION_ID),
    AUDIT_DATA VARCHAR2(4000),
    AUD_INS_DTTM TIMESTAMP DEFAULT SYSTIMESTAMP,
    AUD_UPD_DTTM TIMESTAMP DEFAULT SYSTIMESTAMP,
    AUD_UPD_USER VARCHAR2(255) DEFAULT USER,
    AUD_REC_STAT CHAR(1) DEFAULT 'A' CHECK(AUD_REC_STAT IN ('A', 'I'))
);

-- CREATE SAMPLE TABLE FOR AUDIT
CREATE TABLE DB_AUDIT.APP_TAB1 (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL
);

CREATE TABLE DB_AUDIT.APP_TAB2 (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    PHONE NUMBER(10) NOT NULL
);

-- CREATE A SAMPLE USER FOR TESTING
DROP USER AUDIT_TEST CASCADE;

CREATE USER AUDIT_TEST IDENTIFIED BY tiger;
GRANT CREATE SESSION TO AUDIT_TEST;
GRANT SELECT, INSERT, UPDATE, DELETE ON DB_AUDIT.APP_TAB1 TO AUDIT_TEST;
GRANT SELECT, INSERT, UPDATE, DELETE ON DB_AUDIT.APP_TAB2 TO AUDIT_TEST;

-- INSERT ENTITY IN THE APP_ENTITY TABLE
INSERT INTO DB_AUDIT.APP_ENTITY (ENTITY_NAME, ENTITY_TYPE)
VALUES ('APP_TAB1', 'TABLE');

INSERT INTO DB_AUDIT.APP_ENTITY (ENTITY_NAME, ENTITY_TYPE)
VALUES ('APP_TAB2', 'TABLE');

INSERT INTO DB_AUDIT.APP_ENTITY (ENTITY_NAME, ENTITY_TYPE)
VALUES ('AUDIT_TEST', 'USER');

COMMIT;

-- INSERT ACTIONS INTO THE APP_ACTION_TYPE
INSERT INTO DB_AUDIT.APP_ACTION_TYPE(ACTION_TYPE_DESC)
VALUES('INSERT');

INSERT INTO DB_AUDIT.APP_ACTION_TYPE(ACTION_TYPE_DESC)
VALUES('UPDATE');

INSERT INTO DB_AUDIT.APP_ACTION_TYPE(ACTION_TYPE_DESC)
VALUES('DELETE');

COMMIT;

INSERT INTO DB_AUDIT.APP_AUDIT_ACTION (ENTITY_ID, ACTION_TYPE_ID, AUDIT_START_DATE, AUDIT_EXPIRE_DATE)
VALUES(1, 1, SYSDATE, SYSDATE+30);

INSERT INTO DB_AUDIT.APP_AUDIT_ACTION (ENTITY_ID, ACTION_TYPE_ID, AUDIT_START_DATE, AUDIT_EXPIRE_DATE)
VALUES(1, 2, SYSDATE, SYSDATE+30);

INSERT INTO DB_AUDIT.APP_AUDIT_ACTION (ENTITY_ID, ACTION_TYPE_ID, AUDIT_START_DATE, AUDIT_EXPIRE_DATE)
VALUES(1, 3, SYSDATE, SYSDATE+30);

INSERT INTO DB_AUDIT.APP_AUDIT_ACTION (ENTITY_ID, ACTION_TYPE_ID, AUDIT_START_DATE, AUDIT_EXPIRE_DATE)
VALUES(2, 1, SYSDATE, SYSDATE+30);

INSERT INTO DB_AUDIT.APP_AUDIT_ACTION (ENTITY_ID, ACTION_TYPE_ID, AUDIT_START_DATE, AUDIT_EXPIRE_DATE)
VALUES(2, 2, SYSDATE, SYSDATE+30);

INSERT INTO DB_AUDIT.APP_AUDIT_ACTION (ENTITY_ID, ACTION_TYPE_ID, AUDIT_START_DATE, AUDIT_EXPIRE_DATE)
VALUES(2, 3, SYSDATE, SYSDATE+30);

INSERT INTO DB_AUDIT.APP_AUDIT_ACTION (ENTITY_ID, ACTION_TYPE_ID, AUDIT_START_DATE, AUDIT_EXPIRE_DATE)
VALUES(3, 1, SYSDATE, SYSDATE+30);

INSERT INTO DB_AUDIT.APP_AUDIT_ACTION (ENTITY_ID, ACTION_TYPE_ID, AUDIT_START_DATE, AUDIT_EXPIRE_DATE)
VALUES(3, 2, SYSDATE, SYSDATE+30);

INSERT INTO DB_AUDIT.APP_AUDIT_ACTION (ENTITY_ID, ACTION_TYPE_ID, AUDIT_START_DATE, AUDIT_EXPIRE_DATE)
VALUES(3, 3, SYSDATE, SYSDATE+30);

COMMIT;

SELECT * FROM DB_AUDIT.APP_ENTITY;
SELECT * FROM DB_AUDIT.APP_ACTION_TYPE;
SELECT * FROM DB_AUDIT.APP_AUDIT_ACTION;
SELECT * FROM DB_AUDIT.APP_AUDIT_DATA;

CREATE OR REPLACE PACKAGE DB_AUDIT.PKG_APP_AUDIT IS
    PROCEDURE DB_AUDIT.LOG_OPERATION(
        P_TABLE_NAME VARCHAR2,
        P_OPERATION VARCHAR2,
        P_OLD_DATA VARCHAR2 DEFAULT NULL,
        P_NEW_DATA VARCHAR2 DEFAULT NULL
    );
END;
/

CREATE OR REPLACE PACKAGE BODY DB_AUDIT.PKG_APP_AUDIT IS
    PROCEDURE DB_AUDIT.LOG_OPERATION(
        P_TABLE_NAME VARCHAR2,
        P_OPERATION VARCHAR2,
        P_OLD_DATA VARCHAR2 DEFAULT NULL,
        P_NEW_DATA VARCHAR2 DEFAULT NULL
    ) IS
        V_AUDIT_ACTION_ID NUMBER;
        V_AUDIT_DATA VARCHAR2(4000);
    BEGIN
        -- First try to find a specific audit action for this table and operation
        BEGIN
            SELECT A.AUDIT_ACTION_ID INTO V_AUDIT_ACTION_ID
            FROM APP_AUDIT_ACTION A, APP_ENTITY E, APP_AUDIT_ACTION_TYPE T
            WHERE A.ENTITY_ID = E.ENTITY_ID
            AND A.ACTION_TYPE_ID = T.ACTION_TYPE_ID
            AND E.ENTITY_NAME = P_TABLE_NAME
            AND E.ENTITY_TYPE = 'TABLE'
            AND T.ACTION_TYPE_DESC = UPPER(P_OPERATION)
            AND SYSDATE BETWEEN A.AUDIT_START_DATE AND A.AUDIT_EXPIRE_DATE
            AND ROWNUM = 1;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                -- If not found, try to find a general audit action for the user
                BEGIN
                    SELECT A.AUDIT_ACTION_ID INTO V_AUDIT_ACTION_ID
                    FROM APP_AUDIT_ACTION A, APP_ENTITY E, APP_AUDIT_ACTION_TYPE T
                    WHERE A.ENTITY_ID = E.ENTITY_ID
                    AND A.ACTION_TYPE_ID = T.ACTION_TYPE_ID
                    AND E.ENTITY_NAME = USER
                    AND E.ENTITY_TYPE = 'USER'
                    AND T.ACTION_TYPE_DESC = UPPER(P_OPERATION)
                    AND SYSDATE BETWEEN A.AUDIT_START_DATE AND A.AUDIT_EXPIRE_DATE
                    AND ROWNUM = 1;
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        RETURN; -- No audit configuration found
                END;
        END;
        
        -- Prepare audit data
        V_AUDIT_DATA := P_OPERATION || ' on ' || P_TABLE_NAME;
        IF P_OLD_DATA IS NOT NULL THEN
            V_AUDIT_DATA := V_AUDIT_DATA || ' | Old: ' || P_OLD_DATA;
        END IF;
        IF P_NEW_DATA IS NOT NULL THEN
            V_AUDIT_DATA := V_AUDIT_DATA || ' | New: ' || P_NEW_DATA;
        END IF;
        
        -- Insert audit record
        INSERT INTO APP_AUDIT_DATA(
            AUDIT_DATA_ID, AUDIT_DATA, AUDIT_ACTION_ID,
            AUD_INS_DTTM, AUD_UPD_USER, AUD_REC_STAT
        ) VALUES (
            SEQ_APP_AUDIT_DATA.NEXTVAL, V_AUDIT_DATA, V_AUDIT_ACTION_ID,
            SYSDATE, USER, 'A'
        );
END;
END;
/

CREATE OR REPLACE TRIGGER TRG_APP_TBL1_AUDIT
BEFORE INSERT OR UPDATE OR DELETE 
ON APP_TBL1 
FOR EACH ROW 
DECLARE
    V_OPERATION VARCHAR2(10);
    V_OLD_DATA VARCHAR2(4000);
    V_NEW_DATA VARCHAR2(4000);BEGIN
    IF INSERTING THEN
        V_OPERATION := 'INSERT';
        V_NEW_DATA := 'CODE=' || :NEW.CODE || ',DESC=' || :NEW.DESCRIPTION;
        PKG_APP_AUDIT.LOG_OPERATION('APP_TBL1', V_OPERATION, NULL, V_NEW_DATA);
    ELSIF UPDATING THEN
        V_OPERATION := 'UPDATE';
        V_OLD_DATA := 'CODE=' || :OLD.CODE || ',DESC=' || :OLD.DESCRIPTION;
        V_NEW_DATA := 'CODE=' || :NEW.CODE || ',DESC=' || :NEW.DESCRIPTION;
        PKG_APP_AUDIT.LOG_OPERATION('APP_TBL1', V_OPERATION, V_OLD_DATA, V_NEW_DATA);
    ELSIF DELETING THEN
        V_OPERATION := 'DELETE';
        V_OLD_DATA := 'CODE=' || :OLD.CODE || ',DESC=' || :OLD.DESCRIPTION;
        PKG_APP_AUDIT.LOG_OPERATION('APP_TBL1', V_OPERATION, V_OLD_DATA, NULL);
END IF;
END;
/

-- Trigger for APP_TBL2
CREATE OR REPLACE TRIGGER TRG_APP_TBL2_AUDIT
BEFORE INSERT OR UPDATE OR DELETE ON APP_TBL2 FOR EACH ROW DECLARE
    V_OPERATION VARCHAR2(10);
    V_OLD_DATA VARCHAR2(4000);
    V_NEW_DATA VARCHAR2(4000);BEGIN
    IF INSERTING THEN
        V_OPERATION := 'INSERT';
        V_NEW_DATA := 'ID=' || :NEW.ID || ',NAME=' || :NEW.NAME || ',PHONE=' || :NEW.PHONE;
        PKG_APP_AUDIT.LOG_OPERATION('APP_TBL2', V_OPERATION, NULL, V_NEW_DATA);
    ELSIF UPDATING THEN
        V_OPERATION := 'UPDATE';
        V_OLD_DATA := 'ID=' || :OLD.ID || ',NAME=' || :OLD.NAME || ',PHONE=' || :OLD.PHONE;
        V_NEW_DATA := 'ID=' || :NEW.ID || ',NAME=' || :NEW.NAME || ',PHONE=' || :NEW.PHONE;
        PKG_APP_AUDIT.LOG_OPERATION('APP_TBL2', V_OPERATION, V_OLD_DATA, V_NEW_DATA);
    ELSIF DELETING THEN
        V_OPERATION := 'DELETE';
        V_OLD_DATA := 'ID=' || :OLD.ID || ',NAME=' || :OLD.NAME || ',PHONE=' || :OLD.PHONE;
        PKG_APP_AUDIT.LOG_OPERATION('APP_TBL2', V_OPERATION, V_OLD_DATA, NULL);
END IF;
END;
/


SELECT
    D.AUDIT_DATA_ID,
    D.AUDIT_DATA AS OPERATION,
    TO_CHAR(D.AUD_INS_DTTM, 'DD-MON-YYYY HH24:MI:SS') AS TIMESTAMP,
    D.AUD_UPD_USER AS PERFORMED_BY,
    E.ENTITY_NAME AS ON_ENTITY,
    T.ACTION_TYPE_DESC AS ACTION_TYPE
FROM
    APP_AUDIT_DATA D,
    APP_AUDIT_ACTION A,
    APP_ENTITY E,
    APP_AUDIT_ACTION_TYPE T
WHERE
    D.AUDIT_ACTION_ID = A.AUDIT_ACTION_ID
    AND A.ENTITY_ID = E.ENTITY_ID
    AND A.ACTION_TYPE_ID = T.ACTION_TYPE_ID
ORDER BY
    D.AUDIT_DATA_ID;