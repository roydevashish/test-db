-- Drop and Create APP_AUDIT_TABLE table
DROP TABLE DB_AUDIT.APP_AUDIT_TABLE;
CREATE TABLE DB_AUDIT.APP_AUDIT_TABLE (
    TABLE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TABLE_NAME VARCHAR2(255) NOT NULL UNIQUE,
    TABLE_DESCRIPTION VARCHAR2(500),
    AUDIT_X CHAR(1) DEFAULT 'Y' CHECK (AUDIT_X IN ('Y', 'N')),
    ARCHIVE CHAR(1) DEFAULT 'N' CHECK (ARCHIVE IN ('Y', 'N')),
    ARCHIVE_COUNT NUMBER DEFAULT 0,
    PURGE CHAR(1) DEFAULT 'N' CHECK (PURGE IN ('Y', 'N')),
    PURGE_COUNT NUMBER DEFAULT 0,
    COLUMNS VARCHAR2(4000) NOT NULL,
    COLUMNS_COUNT NUMBER,
    START_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    END_DATE TIMESTAMP,
    CTL_INS_DTTM TIMESTAMP DEFAULT SYSTIMESTAMP,
    CTL_UPD_DTTM TIMESTAMP,
    CTL_UPD_USER VARCHAR2(100),
    CTL_REC_STAT CHAR(1) DEFAULT 'A' CHECK (CTL_REC_STAT IN ('A', 'I'))
);

-- Drop and Create APP_AUDIT_DATA table
DROP TABLE DB_AUDIT.APP_AUDIT_DATA;
CREATE TABLE DB_AUDIT.APP_AUDIT_DATA (
    AUDIT_DATA_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TABLE_ID NUMBER NOT NULL,
    AUDIT_DATA CLOB, 
    CTL_INS_DTTM TIMESTAMP DEFAULT SYSTIMESTAMP,
    CTL_UPD_USER VARCHAR2(255) DEFAULT USER,
    CTL_REC_STAT CHAR(1) DEFAULT 'A' CHECK (CTL_REC_STAT IN ('A', 'I')),
    CTL_UPD_DTTM TIMESTAMP,
    
    CONSTRAINT FK_AUDIT_TABLE FOREIGN KEY (TABLE_ID) REFERENCES DB_AUDIT.APP_AUDIT_TABLE(TABLE_ID)
);

-- Drop and Create TEST_TABLE table
DROP TABLE TEST_TABLE;
CREATE TABLE TEST_TABLE (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    COLUMN_1 VARCHAR2(10) DEFAULT NULL,
    COLUMN_2 VARCHAR2(10) DEFAULT NULL,
    COLUMN_3 VARCHAR2(10) DEFAULT NULL,
    COLUMN_4 VARCHAR2(10) DEFAULT NULL,
    COLUMN_5 VARCHAR2(10) DEFAULT NULL,
    COLUMN_6 VARCHAR2(10) DEFAULT NULL,
    COLUMN_7 VARCHAR2(10) DEFAULT NULL,
    COLUMN_8 VARCHAR2(10) DEFAULT NULL
)

-- Grant permissions to other users for operations.
GRANT SELECT, INSERT, UPDATE, DELETE ON DB_AUDIT.TEST_TABLE TO SCOTT; 

-- Drop and Create a trigger to make entry in audit data table
DROP TRIGGER DB_AUDIT.TGR_AUDIT;

CREATE OR REPLACE TRIGGER DB_AUDIT.TGR_AUDIT
BEFORE UPDATE ON DB_AUDIT.TEST_TABLE
FOR EACH ROW
DECLARE
    V_TABLE_NAME VARCHAR(255);
    V_TABLE_ID NUMBER;
    V_COLUMNS VARCHAR2(4000);
    V_OLD_VALUES CLOB;
    V_AUDIT_X VARCHAR2(1);
    V_OLD_VALUE VARCHAR(4000);
BEGIN
    V_TABLE_NAME := 'TEST_TABLE';

    SELECT TABLE_ID, COLUMNS, AUDIT_X INTO V_TABLE_ID, V_COLUMNS, V_AUDIT_X
    FROM DB_AUDIT.APP_AUDIT_TABLE 
    WHERE TABLE_NAME = V_TABLE_NAME;

    IF V_AUDIT_X = 'Y' THEN
        V_OLD_VALUES := '';

        FOR COL IN (SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME = UPPER(V_TABLE_NAME)) 
        LOOP
            IF INSTR(V_COLUMNS, COL.COLUMN_NAME) > 0 THEN
                -- NEED TO FIX THIS PART
                -- BEGIN
                    -- EXECUTE IMMEDIATE 
                        -- 'SELECT * INTO V_OLD_VALUE FROM TEST_TABLE WHERE ID = ' || :OLD.ID;

                        -- 'SELECT ' || COL.COLUMN_NAME || ' FROM ' || 
                        -- INTO V_OLD_VALUE;
                        -- USING :OLD;
                -- EXCEPTION 
                    -- WHEN OTHERS THEN
                        -- V_OLD_VALUE := :OLD.ID;
                -- END;
                -- TILL HERE

                V_OLD_VALUE := 'OLD VALUE';
                V_OLD_VALUES := V_OLD_VALUES || COL.COLUMN_NAME || ': ' || V_OLD_VALUE || '; ';
            END IF;
        END LOOP;


        IF V_OLD_VALUES IS NOT NULL THEN
            INSERT INTO DB_AUDIT.APP_AUDIT_DATA (TABLE_ID, AUDIT_DATA, CTL_UPD_USER, CTL_REC_STAT)
            VALUES (V_TABLE_ID, V_OLD_VALUES, USER, 'A');
        END IF;
    END IF;
END;
/


-- testing
INSERT INTO DB_AUDIT.APP_AUDIT_TABLE (TABLE_NAME, TABLE_DESCRIPTION, COLUMNS, COLUMNS_COUNT)
VALUES ('TEST_TABLE', 'User details table', 'COLUMN_1,COLUMN_8', 2);
COMMIT;

SELECT * FROM DB_AUDIT.APP_AUDIT_TABLE;

INSERT INTO DB_AUDIT.TEST_TABLE (COLUMN_1,COLUMN_2,COLUMN_3,COLUMN_4,COLUMN_5,COLUMN_6,COLUMN_7,COLUMN_8)
VALUES('ONE','TWO','THREE','FOUR','FIVE','SIX','SEVEN','EIGHT');
COMMIT;

SELECT * FROM DB_AUDIT.TEST_TABLE;

UPDATE DB_AUDIT.TEST_TABLE
SET COLUMN_1 = 'NEW', COLUMN_8 = 'NEW'
WHERE ID = 1;
COMMIT;

UPDATE DB_AUDIT.TEST_TABLE
SET COLUMN_1 = 'HOP'
WHERE ID = 21;
COMMIT;

SELECT * FROM DB_AUDIT.TEST_TABLE;

SELECT * FROM DB_AUDIT.APP_AUDIT_DATA;










INSERT INTO TEST_TABLE (COLUMN_1,COLUMN_2,COLUMN_3,COLUMN_4,COLUMN_5,COLUMN_6,COLUMN_7,COLUMN_8)
VALUES('A','A','A','A','A','A','A','A');
SELECT * FROM DB_AUDIT.TEST_TABLE;
UPDATE DB_AUDIT.TEST_TABLE
    SET COLUMN_1 = 'Z'
    WHERE ID = 3;


-- Creating an audit trigger
DROP TRIGGER DB_AUDIT.TRG_AUDIT_UPDATE;
CREATE OR REPLACE TRIGGER DB_AUDIT.TRG_AUDIT_UPDATE
AFTER UPDATE ON DB_AUDIT.TEST_TABLE
FOR EACH ROW
DECLARE
    v_table_id NUMBER;
    v_columns_to_audit VARCHAR2(4000);
    v_old_values VARCHAR2(4000);
BEGIN
    -- Get the table ID and columns to audit
    -- SELECT TABLE_ID, COLUMNS INTO v_table_id, v_columns_to_audit
    -- FROM DB_AUDIT.APP_AUDIT_TABLE
    -- WHERE TABLE_NAME = 'TEST_TABLE' AND AUDIT_X = 'Y';
    
    -- Check if specified columns have changed
    v_old_values := '';
    IF :OLD.COLUMN_1 IS NOT NULL AND :OLD.COLUMN_1 <> :NEW.COLUMN_1 THEN
        v_old_values := v_old_values || 'COLUMN_1: ' || :OLD.COLUMN_1 || '; ';
    END IF;
    IF :OLD.COLUMN_2 IS NOT NULL AND :OLD.COLUMN_2 <> :NEW.COLUMN_2 THEN
        v_old_values := v_old_values || 'COLUMN_2: ' || :OLD.COLUMN_2 || '; ';
    END IF;
    
    -- Insert into audit data table
    -- IF v_old_values IS NOT NULL THEN
    --     INSERT INTO APP_AUDIT_DATA (TABLE_ID, AUDIT_DATA, CTL_UPD_USER, CTL_REC_STAT)
    --     VALUES (v_table_id, v_old_values, USER, 'ACTIVE');
    -- END IF;
END;
/








-- Procedure to purge old audit records
CREATE OR REPLACE PROCEDURE PURGE_AUDIT_DATA AS
BEGIN
    DELETE FROM APP_AUDIT_DATA WHERE CTL_INS_DTTM < ADD_MONTHS(SYSDATE, -6);
    COMMIT;
END;
/

-- Procedure to archive old audit records
CREATE OR REPLACE PROCEDURE ARCHIVE_AUDIT_DATA AS
BEGIN
    INSERT INTO ARCHIVED_AUDIT_DATA (AUDIT_DATA_ID, TABLE_ID, AUDIT_DATA, CTL_INS_DTTM, CTL_UPD_DTTM, CTL_UPD_USER, CTL_REC_STAT)
    SELECT * FROM APP_AUDIT_DATA WHERE CTL_INS_DTTM < ADD_MONTHS(SYSDATE, -12);
    DELETE FROM APP_AUDIT_DATA WHERE CTL_INS_DTTM < ADD_MONTHS(SYSDATE, -12);
    COMMIT;
END;
/
